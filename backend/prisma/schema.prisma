// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  TEACHER
  ASSISTANT
  STUDENT
}

model Roles {
  id          String    @id @default(uuid())
  title       String    @unique
  roleType    RoleType? @unique
  description String
  permissions String[] // Mảng chứa danh sách quyền
  deleted     Boolean   @default(false)
  users       User[] // Quan hệ với User
}

model User {
  id                 String         @id @default(uuid())
  slug               String?        @unique
  email              String         @unique
  name               String
  password           String
  tempPassword       String?
  status             String         @default("active")
  enrollments        Enrollment[]
  userAnswers        UserAnswer[]
  userExams          UserExam[]
  Announcement       Announcement[]
  deletedAt          DateTime?
  mustChangePassword Boolean        @default(true)
  roleId             String
  role               Roles          @relation(fields: [roleId], references: [id])
  gender             String?
  address            String?
  phone              String?
  dateOfBirth        DateTime?
  avatarUrl          String?
  Course             Course[]
  attendances        Attendance[] // Thêm quan hệ ngược lại với Attendance
}

model Course {
  id          String         @id @default(uuid())
  slug        String?        @unique
  name        String
  description String
  price       Int
  startDate   DateTime
  endDate     DateTime
  teacherId   String
  teacher     User           @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[] // Quan hệ với Enrollment
  exams       Exam[] // Quan hệ với Exam
  lessons     Lesson[] // Quan hệ với Lesson
  docs        doc[] // Quan hệ với tài liệu
  deleted     Boolean        @default(false)
  imageUrl    String?
  docsCourse  docsOfCourse[]
}

model Lesson {
  id          String       @id @default(uuid())
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id])
  date        DateTime // Ngày diễn ra buổi học
  title       String // Tiêu đề buổi học
  description String? // Mô tả buổi học
  deleted     Boolean      @default(false) // Xóa mềm buổi học
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[] // Quan hệ với Attendance
}

model Attendance {
  id       String  @id @default(uuid())
  lessonId String
  lesson   Lesson  @relation(fields: [lessonId], references: [id])
  userId   String
  user     User    @relation(fields: [userId], references: [id])
  attended Boolean // Học viên có điểm danh hay không
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  CANCELED
}

model Enrollment {
  id       String           @id @default(uuid())
  user     User             @relation(fields: [userId], references: [id])
  userId   String
  course   Course           @relation(fields: [courseId], references: [id])
  courseId String
  status   EnrollmentStatus @default(PENDING)
  deleted  Boolean          @default(false)

  @@unique([userId, courseId]) // Prevent duplicate enrollments
}

model Exam {
  id          String     @id @default(uuid())
  title       String
  description String
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
  startDate   DateTime
  endDate     DateTime
  questions   Question[]
  UserExam    UserExam[]
  deleted     Boolean    @default(false)
  timeLimit   Int        @default(3600)
}

enum QuestionType {
  OBJECTIVE
  FILL
  MATCHING
  REORDERING
  DROPDOWN
}

model Question {
  id         String           @id @default(uuid())
  exam       Exam             @relation(fields: [examId], references: [id])
  examId     String
  type       QuestionType
  content    String // Question content (TinyMCE or text)
  options    QuestionOption[]
  UserAnswer UserAnswer[]
}

model QuestionOption {
  id         String       @id @default(uuid())
  question   Question     @relation(fields: [questionId], references: [id])
  questionId String
  content    String
  isCorrect  Boolean
  num        Int          @default(-1)
  UserAnswer UserAnswer[]
}

enum ExamStatus {
  IN_PROGRESS
  COMPLETED
}

model UserExam {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  exam        Exam         @relation(fields: [examId], references: [id])
  examId      String
  startTime   DateTime
  endTime     DateTime?
  status      ExamStatus   @default(IN_PROGRESS)
  userAnswers UserAnswer[]
}

model UserAnswer {
  id               String          @id @default(uuid())
  userExam         UserExam        @relation(fields: [userExamId], references: [id])
  userExamId       String
  question         Question        @relation(fields: [questionId], references: [id])
  questionId       String
  questionOption   QuestionOption? @relation(fields: [questionOptionId], references: [id])
  questionOptionId String?
  User             User?           @relation(fields: [userId], references: [id])
  userId           String?
  score            Float
  timeTaken        Int?
  deleted          Boolean         @default(false)
}

enum AnnouncementVisibility {
  ALL
  STUDENT
  TEACHER
  ASSISTANT
  ADMIN
}

model Announcement {
  id             String                 @id @default(uuid())
  title          String
  content        String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  author         User                   @relation(fields: [authorId], references: [id])
  authorId       String
  roleVisibility AnnouncementVisibility @default(ALL)
  courseIds      String[] // Array of course IDs
  deleted        Boolean                @default(false)
}

model doc {
  id       String @id @default(uuid())
  title    String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  fileUrl  String
}

model docsOfCourse {
  id        String   @id @default(uuid())
  title     String
  content   String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
}
