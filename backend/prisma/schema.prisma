// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  name               String
  password           String
  status             String         @default("active")
  role_id            String
  token              String
  role               Roles          @relation(fields: [role_id], references: [id])
  enrollments        Enrollment[] // Add relation to Enrollment
  userAnswers        UserAnswer[] // Relation to UserAnswer
  userExams          UserExam[] // Relation to UserExam
  Announcement       Announcement[]
  deleted            Boolean        @default(false)
  mustChangePassword Boolean        @default(true)
}

model Course {
  id          String       @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  enrollments Enrollment[] // Add relation to Enrollment
  exams       Exam[] // Relation to Exam
  deleted     Boolean      @default(false)
  docs        doc[]
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Enrollment {
  id       String           @id @default(uuid())
  user     User             @relation(fields: [userId], references: [id])
  userId   String
  course   Course           @relation(fields: [courseId], references: [id])
  courseId String
  status   EnrollmentStatus @default(PENDING)
  deleted  Boolean          @default(false)

  @@unique([userId, courseId]) // Prevent duplicate enrollments
}

model Exam {
  id        String     @id @default(uuid())
  course    Course     @relation(fields: [courseId], references: [id])
  courseId  String
  startDate DateTime
  endDate   DateTime
  questions Question[]
  UserExam  UserExam[]
  deleted   Boolean    @default(false)
}

enum QuestionType {
  OBJECTIVE
  FILL
  MATCHING
  REORDERING
  DROPDOWN
}

model Question {
  id         String           @id @default(uuid())
  exam       Exam             @relation(fields: [examId], references: [id])
  examId     String
  type       QuestionType
  content    String // Question content (TinyMCE or text)
  options    QuestionOption[]
  UserAnswer UserAnswer[]
}

model QuestionOption {
  id         String       @id @default(uuid())
  question   Question     @relation(fields: [questionId], references: [id])
  questionId String
  content    String
  isCorrect  Boolean
  UserAnswer UserAnswer[]
}

enum ExamStatus {
  IN_PROGRESS
  COMPLETED
}

model UserExam {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  exam        Exam         @relation(fields: [examId], references: [id])
  examId      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  status      ExamStatus   @default(IN_PROGRESS)
  userAnswers UserAnswer[]
}

model UserAnswer {
  id               String          @id @default(uuid())
  userExam         UserExam        @relation(fields: [userExamId], references: [id])
  userExamId       String
  question         Question        @relation(fields: [questionId], references: [id])
  questionId       String
  questionOption   QuestionOption? @relation(fields: [questionOptionId], references: [id])
  questionOptionId String?
  User             User?           @relation(fields: [userId], references: [id])
  userId           String?
  deleted          Boolean         @default(false)
}

enum AnnouncementVisibility {
  ALL
  STUDENT
  ADMIN
}

model Announcement {
  id             String                 @id @default(uuid())
  title          String
  content        String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  author         User                   @relation(fields: [authorId], references: [id])
  authorId       String
  roleVisibility AnnouncementVisibility @default(ALL)
  deleted        Boolean                @default(false)
}

model Roles {
  id          String   @id @default(uuid())
  title       String
  description String
  permissions String[] // Mảng chứa danh sách quyền
  deleted     Boolean  @default(false)
  User        User[]
}

model doc {
  id         String @id @default(uuid())
  title      String
  courseId   String
  content    String
  linkCourse Course @relation(fields: [courseId], references: [id])
}
